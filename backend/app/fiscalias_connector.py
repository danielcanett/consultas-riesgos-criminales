"""
Conectores para Fiscal√≠as Estatales - Datos oficiales de criminalidad local
"""
import requests
import pandas as pd
import json
from typing import Dict, List, Optional
import asyncio
import aiohttp
from datetime import datetime, timedelta
import re

class FiscaliasEstatalesConnector:
    """Conector para obtener datos de Fiscal√≠as Estatales mexicanas"""
    
    def __init__(self):
        # URLs y endpoints de fiscal√≠as estatales
        self.fiscalias_endpoints = {
            'estado_mexico': {
                'base_url': 'https://pgjem.edomex.gob.mx/api/',
                'estadisticas_url': 'https://pgjem.edomex.gob.mx/transparencia/estadisticas/',
                'carpetas_url': 'https://pgjem.edomex.gob.mx/carpetas-investigacion/',
                'municipios_clave': ['Tultepec', 'Ecatepec', 'Naucalpan', 'Cuautitl√°n'],
                'codigo_estado': '15'
            },
            'nuevo_leon': {
                'base_url': 'https://www.fiscalinl.gob.mx/api/',
                'estadisticas_url': 'https://www.fiscalinl.gob.mx/estadisticas/',
                'carpetas_url': 'https://www.fiscalinl.gob.mx/transparencia/carpetas/',
                'municipios_clave': ['Monterrey', 'Apodaca', 'San Nicol√°s', 'Guadalupe'],
                'codigo_estado': '19'
            },
            'jalisco': {
                'base_url': 'https://www.fiscalia.jalisco.gob.mx/api/',
                'estadisticas_url': 'https://www.fiscalia.jalisco.gob.mx/estadisticas/',
                'carpetas_url': 'https://www.fiscalia.jalisco.gob.mx/transparencia/',
                'municipios_clave': ['Guadalajara', 'Tlaquepaque', 'Zapopan', 'Tonal√°'],
                'codigo_estado': '14'
            }
        }
        
        # Mapeo de delitos por fiscal√≠a
        self.delitos_mapping = {
            'robo_negocio': ['robo a negocio', 'robo comercio', 'robo establecimiento'],
            'robo_vehiculo': ['robo veh√≠culo', 'robo auto', 'robo transporte'],
            'extorsion': ['extorsi√≥n', 'amenazas', 'intimidaci√≥n'],
            'homicidio': ['homicidio', 'asesinato', 'muerte violenta'],
            'secuestro': ['secuestro', 'privaci√≥n libertad', 'plagio'],
            'fraude': ['fraude', 'estafa', 'abuso confianza'],
            'lesiones': ['lesiones', 'agresi√≥n', 'golpes'],
            'violencia_familiar': ['violencia familiar', 'violencia dom√©stica']
        }
    
    async def get_state_crime_data(self, estado: str, municipio: str) -> Dict:
        """Obtiene datos de criminalidad espec√≠ficos por estado y municipio"""
        print(f"üèõÔ∏è Consultando Fiscal√≠a Estatal: {estado} - {municipio}")
        
        if estado.lower().replace(' ', '_') not in self.fiscalias_endpoints:
            print(f"‚ö†Ô∏è Estado {estado} no configurado en fiscal√≠as")
            return self._get_fallback_data(estado, municipio)
        
        fiscalia_config = self.fiscalias_endpoints[estado.lower().replace(' ', '_')]
        
        try:
            # Intentar obtener datos oficiales de la fiscal√≠a
            data_oficial = await self._fetch_official_data(fiscalia_config, municipio)
            
            if data_oficial:
                return data_oficial
            else:
                # Fallback a web scraping si API no disponible
                return await self._scrape_fiscalia_data(fiscalia_config, municipio)
                
        except Exception as e:
            print(f"‚ùå Error consultando fiscal√≠a {estado}: {e}")
            return self._get_fallback_data(estado, municipio)
    
    async def _fetch_official_data(self, fiscalia_config: Dict, municipio: str) -> Optional[Dict]:
        """Intenta obtener datos oficiales via API de la fiscal√≠a"""
        try:
            async with aiohttp.ClientSession() as session:
                # Construir URL de consulta
                api_url = f"{fiscalia_config['base_url']}estadisticas/municipio/{municipio}"
                
                async with session.get(api_url, timeout=30) as response:
                    if response.status == 200:
                        data = await response.json()
                        return self._process_official_data(data, municipio, fiscalia_config)
                    else:
                        print(f"‚ö†Ô∏è API fiscal√≠a no disponible: {response.status}")
                        return None
                        
        except Exception as e:
            print(f"‚ö†Ô∏è Error en API fiscal√≠a: {e}")
            return None
    
    async def _scrape_fiscalia_data(self, fiscalia_config: Dict, municipio: str) -> Dict:
        """Web scraping de p√°ginas de estad√≠sticas de fiscal√≠as"""
        print(f"üï∑Ô∏è Haciendo scraping de datos de fiscal√≠a para {municipio}")
        
        crime_data = {
            'municipio': municipio,
            'estado': fiscalia_config.get('codigo_estado'),
            'fuente': 'fiscalia_estatal_scraping',
            'fecha_consulta': datetime.now().isoformat(),
            'delitos': {},
            'estadisticas_adicionales': {}
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                # Scraping de p√°gina de estad√≠sticas
                stats_url = fiscalia_config['estadisticas_url']
                
                async with session.get(stats_url, timeout=45) as response:
                    if response.status == 200:
                        html_content = await response.text()
                        crime_data['delitos'] = self._extract_crime_stats_from_html(html_content, municipio)
                
                # Scraping de carpetas de investigaci√≥n
                carpetas_url = fiscalia_config['carpetas_url']
                
                async with session.get(carpetas_url, timeout=45) as response:
                    if response.status == 200:
                        html_content = await response.text()
                        crime_data['estadisticas_adicionales'] = self._extract_investigation_stats(html_content, municipio)
                        
        except Exception as e:
            print(f"‚ö†Ô∏è Error en scraping: {e}")
        
        return crime_data
    
    def _extract_crime_stats_from_html(self, html_content: str, municipio: str) -> Dict:
        """Extrae estad√≠sticas de criminalidad del HTML"""
        crime_stats = {}
        
        # Patrones regex para extraer n√∫meros de delitos
        patterns = {
            'robo_negocio': r'robo.*?negocio.*?(\d+)',
            'extorsion': r'extorsi√≥n.*?(\d+)',
            'homicidio': r'homicidio.*?(\d+)',
            'secuestro': r'secuestro.*?(\d+)',
            'fraude': r'fraude.*?(\d+)'
        }
        
        for delito, pattern in patterns.items():
            matches = re.findall(pattern, html_content.lower())
            if matches:
                # Tomar el primer n√∫mero encontrado
                crime_stats[delito] = int(matches[0])
            else:
                crime_stats[delito] = 0
        
        return crime_stats
    
    def _extract_investigation_stats(self, html_content: str, municipio: str) -> Dict:
        """Extrae estad√≠sticas de carpetas de investigaci√≥n"""
        investigation_stats = {
            'carpetas_abiertas': 0,
            'casos_resueltos': 0,
            'tasa_resolucion': 0,
            'tiempo_promedio_resolucion': None
        }
        
        # Patrones para extraer estad√≠sticas de investigaci√≥n
        try:
            # Buscar n√∫meros de carpetas
            carpetas_match = re.search(r'carpetas.*?(\d+)', html_content.lower())
            if carpetas_match:
                investigation_stats['carpetas_abiertas'] = int(carpetas_match.group(1))
            
            # Buscar casos resueltos
            resueltos_match = re.search(r'resuelto.*?(\d+)', html_content.lower())
            if resueltos_match:
                investigation_stats['casos_resueltos'] = int(resueltos_match.group(1))
            
            # Calcular tasa de resoluci√≥n
            if investigation_stats['carpetas_abiertas'] > 0:
                investigation_stats['tasa_resolucion'] = round(
                    (investigation_stats['casos_resueltos'] / investigation_stats['carpetas_abiertas']) * 100, 2
                )
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error extrayendo estad√≠sticas de investigaci√≥n: {e}")
        
        return investigation_stats
    
    def _process_official_data(self, data: Dict, municipio: str, fiscalia_config: Dict) -> Dict:
        """Procesa datos oficiales de la API de fiscal√≠a"""
        processed_data = {
            'municipio': municipio,
            'estado': fiscalia_config.get('codigo_estado'),
            'fuente': 'fiscalia_estatal_api',
            'fecha_consulta': datetime.now().isoformat(),
            'delitos': {},
            'estadisticas_adicionales': {}
        }
        
        # Procesar estructura de datos seg√∫n fiscal√≠a
        if 'delitos' in data:
            processed_data['delitos'] = data['delitos']
        
        if 'estadisticas' in data:
            processed_data['estadisticas_adicionales'] = data['estadisticas']
        
        return processed_data
    
    def _get_fallback_data(self, estado: str, municipio: str) -> Dict:
        """Datos de fallback cuando no se puede consultar fiscal√≠a"""
        return {
            'municipio': municipio,
            'estado': estado,
            'fuente': 'fallback_estimacion',
            'fecha_consulta': datetime.now().isoformat(),
            'delitos': {
                'robo_negocio': None,
                'extorsion': None,
                'homicidio': None,
                'secuestro': None,
                'fraude': None
            },
            'estadisticas_adicionales': {
                'carpetas_abiertas': None,
                'casos_resueltos': None,
                'tasa_resolucion': None
            },
            'nota': 'Datos no disponibles de fiscal√≠a estatal'
        }

# Funci√≥n principal para uso en el sistema
async def get_state_prosecutor_data(estado: str, municipio: str) -> Dict:
    """Funci√≥n principal para obtener datos de fiscal√≠as estatales"""
    connector = FiscaliasEstatalesConnector()
    return await connector.get_state_crime_data(estado, municipio)
